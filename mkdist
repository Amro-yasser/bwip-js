#!/bin/bash
## file : mkdist

##
## Verify we can find the BWIPP copyright notice
##
COPYR=$(grep '% Copyright (c)' barcode.ps | sed -e 's,%,//,')
if [ "x$COPYR" = x ] ; then
	echo "Unable to find the copyright notice in barcode.ps" 1>&2
	exit 1
fi

##
## Verify we can find the BWIPP file version
##
FILEV=$(grep '% Barcode Writer in Pure PostScript - Version' barcode.ps | sed -e 's,%,//,')
if [ "x$FILEV" = x ] ; then
	echo "Unable to find the version string in barcode.ps" 1>&2
	exit 1
fi

## What year is it?
YEAR="2011-$(date +%Y)"

cat <<@EOF > dist/bwip-js.js
// This file is part of the bwip-js project available at:
//
// 	  http://metafloor.github.io/bwip-js
//
// Copyright (c) $YEAR Mark Warren
//
// This file contains code automatically generated from:
$FILEV
$COPYR
//
// The MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        root.bwipjs = factory();
	}
}(typeof self !== 'undefined' ? self : this, function () {
"use strict";
@EOF

## Separate browser and node modules
cp dist/bwip-js.js dist/bwip-js-min.js
cp dist/bwip-js.js dist/node-bwipjs.js

## Inverted logic on the excludes (minified browser code is inlined below)
sed -e '/@@BEGIN-BROWSER-ONLY@@/,/@@ENDOF-BROWSER-ONLY@@/d' < src/exports.js >> dist/node-bwipjs.js
sed -e '/@@BEGIN-NODE-JS-ONLY@@/,/@@ENDOF-NODE-JS-ONLY@@/d' < src/exports.js >> dist/bwip-js.js

## nodejs plain-source - no drawing-canvas.js
cat src/bwipp.js src/bwipjs.js src/drawing-builtin.js src/drawing-zlibpng.js src/fontlib.js src/stb_truetype.js >> dist/node-bwipjs.js 

## browser plain-source - no drawing-zlibpng.js
cat src/bwipp.js src/bwipjs.js src/drawing-builtin.js src/drawing-canvas.js src/fontlib.js src/stb_truetype.js >> dist/bwip-js.js 

##
## Shorten the postscript operator names rather than use random variable
## name mangling.
##
node rename
uglifyjs bwipp-min.js >> dist/bwip-js-min.js
rm -f bwipp-min.js

## browser minified - minified exports and no drawing-zlibpng.js
sed -e '/@@BEGIN-NODE-JS-ONLY@@/,/@@ENDOF-NODE-JS-ONLY@@/d' < src/exports.js | cat - src/bwipjs.js src/drawing-builtin.js src/drawing-canvas.js src/fontlib.js src/stb_truetype.js | uglifyjs --mangle >> dist/bwip-js-min.js 

## nodejs postamble
cat - <<@EOF >> dist/node-bwipjs.js
function toUint8Array(data) {
    if (typeof data == "string") {
        var binary = /[^A-Za-z0-9+\/=\s]/.test(data);
        return Buffer.from ? Buffer.from(data, binary ? 'binary' : 'base64')
                           : new Buffer(data, binary ? 'binary' : 'base64');
    } else if (data instanceof Uint8Array) {
        return data;
    } else if (data instanceof ArrayBuffer) {
        return new Uint8Array(data);
    }
    throw new ReferenceError("data must be a binary or base64 encoded string or a Buffer/Uint8Array");
}

FontLib.loadFont("OCR-A", 100, 100, "$(base64 fonts/OCRA7.ttf | tr -d '\r\n\t ')");
FontLib.loadFont("OCR-B", 96, 100, "$(base64 fonts/OCRB7.ttf | tr -d '\r\n\t ')");

return {
        // The public interface
        request:Request, toBuffer:ToBuffer, render:Render, raw:Raw,
        fixupOptions:FixupOptions,
        loadFont:FontLib.loadFont,
        VERSION:'__BWIPJS_VERS__',

        // Internals
        BWIPJS:BWIPJS, BWIPP:BWIPP, STBTT:STBTT, FontLib:FontLib,
        DrawingBuiltin:DrawingBuiltin, DrawingZlibPng:DrawingZlibPng,
    };
}));
@EOF

## browser postamble
for file in  dist/bwip-js.js dist/bwip-js-min.js ; do
cat - <<@EOF >> $file
function toUint8Array(data) {
    if (typeof data == "string") {
        var binary = /[^A-Za-z0-9+\/=\s]/.test(data);
        var bstr = binary ? data : atob(data),
            len = bstr.length,
            bytes = new Uint8Array(len);
        for (var i = 0; i < len; i++) {
            bytes[i] = bstr.charCodeAt(i);
        }
        return bytes;
    } else if (data instanceof Uint8Array) {
        return data;
    } else if (data instanceof ArrayBuffer) {
        return new Uint8Array(data);
    }
    throw new ReferenceError("data must be a binary or base64 encoded string or Uint8Array");
}

FontLib.loadFont("OCR-A", 100, 100, "$(base64 fonts/OCRA7.ttf | tr -d '\r\n\t ')");
FontLib.loadFont("OCR-B", 96, 100, "$(base64 fonts/OCRB7.ttf | tr -d '\r\n\t ')");

return {
        // The public interface
        toCanvas:ToCanvas, render:Render, raw:Raw,
        fixupOptions:FixupOptions,
        loadFont:FontLib.loadFont,
        VERSION:'__BWIPJS_VERS__',

        // Internals
        BWIPJS:BWIPJS, BWIPP:BWIPP, STBTT:STBTT, FontLib:FontLib,
        DrawingBuiltin:DrawingBuiltin, DrawingCanvas:DrawingCanvas,
    };
}));
@EOF
done

exit 0
